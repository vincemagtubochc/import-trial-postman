{
  "info": {
    "_postman_id": "d1564eeb-25e0-4b1f-b299-0b5e918e9a2c",
    "name": "Submitter Trial",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "GoodRx_QA_90 Copy",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "faf972a8-4f04-405f-93ae-59692b47ffca",
            "exec": [
              "pm.test(\"Store STR90 should be in use\", function () {\r",
              "    pm.expect(pm.response.json().payload).to.include(\"STR90\");\r",
              "});\r",
              "\r",
              "pm.test(\"NX1 Segment should be added; DK20 Field should be added\", function () {\r",
              "    pm.expect(pm.response.json().payload).to.include(\"NX1\");\r",
              "    pm.expect(pm.response.json().payload).to.include(\"DK20\");\r",
              "});\r",
              "\r",
              "/*---------------------------------------------*/\r",
              "\r",
              "pm.test(\"Successful POST request\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
              "});\r",
              "\r",
              "pm.test(\"Response time is less than 10000ms\", function() {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
              "});\r",
              "\r",
              "pm.test(\"Global transmission ID matches\", function () {\r",
              "    pm.expect(pm.response.json().id).to.include(pm.environment.get(\"globalTransmissionID\"));\r",
              "});\r",
              "\r",
              "pm.test(\"Switch transaction ID matches\", function () {\r",
              "    pm.expect(pm.response.json().id).to.include(pm.environment.get(\"switchTransactionID\"));\r",
              "});\r",
              "\r",
              "pm.test(\"Response should be in json format\", function(){\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"No error\", function () {\r",
              "    pm.response.to.not.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"No EXCEPTION_CAUSE error\", function () {\r",
              "    pm.expect(pm.response.text()).to.not.include(\"EXCEPTION_CAUSE\");\r",
              "});\r",
              "\r",
              "pm.test(\"Status is not bad request\", function () {\r",
              "    pm.response.to.not.be.badRequest;\r",
              "});\r",
              "\r",
              "\r",
              "\r",
              "var responseData = pm.response.json();\r",
              "\r",
              "var ID = responseData.id\r",
              "pm.test(\"Generated ID: \" + ID, function () {});\r",
              "\r",
              "pm.environment.set(\"clmGlobalSwitchID\", responseData.id);\r",
              "pm.environment.set(\"clmPayload\", responseData.payload);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "9613561c-0b7a-44a5-818a-6764f3292f4a",
            "exec": [
              "var moment = require('moment');\r",
              "pm.environment.set('currDate', moment().format(\"YYYYMMDD\"));\r",
              "\r",
              "var firstRand = Math.floor(Math.random() * 1000);\r",
              "\r",
              "var secondRand = Math.floor(Math.random() * 100);\r",
              "\r",
              "pm.variables.set('globalTransmissionID', firstRand + '0' + secondRand);\r",
              "\r",
              "pm.variables.set('switchTransactionID', secondRand + '1' + firstRand);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "24264cf3-575e-4be0-acd8-eaa3c6473086",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"id\": \"{{IDKey}}{{currDate}}{{globalTransmissionID}}_{{IDKey}}{{currDate}}{{switchTransactionID}}\",\r\n    \"type\": \"GOODRX\",\r\n    \"isSynthetic\": {{isSynthetic}},\r\n    \"payload\": \"004766D0QASTR90        QASTR90        20230820HJG       \\u001e\\u001cAM01\\u001cC419500101\\u001cC51\\u001cCATEST\\u001cCBTEST\\u001cCMSOMEWHERE TEXAS\\u001cCNFORT F4TEST NX2WORTH\\u001cCOTX\\u001cCP76116\\u001cCQ1111111111\\u001cC701\\u001c4X\\u001e\\u001cAM04\\u001cC244094326581\\u001cCCTEST\\u001cCDTEST\\u001cC1ELTESTTEST\\u001cC3\\u001cC61\\u001d\\u001e\\u001cAM07\\u001cEM1\\u001cNX2\\u001cD2000004471591\\u001cE103\\u001cD700006057761\\u001cE7001000\\u001cD30\\u001cD57\\u001cD61\\u001cD80\\u001cDE20120113\\u001cDF12\\u001cDJ1\\u001cC800\\u001c28ML\\u001cEU\\u001cEV\\u001cU701\\u001e\\u001cAM02\\u001cEY05\\u001cE91306935911\\u001e\\u001cAM03\\u001cEZ01\\u001cDB1851621064\\u001cDRKIM\\u001cPM7018573255\\u001c2JKWANGHEE\\u001c2K831 S BROADWAY #102\\u001c2MMINOT\\u001c2NND\\u001c2P58701\\u001e\\u001cAM11\\u001cD9369{\\u001cDC70{\\u001cDX{\\u001cDQ377I\\u001cDU439{\\u001cDN01\",\r\n    \"metadata\": [\r\n        {\r\n            \"name\": \"IS_REQUEST\",\r\n            \"value\": \"{{meta_value}}\"\r\n        }\r\n    ],\r\n    \"deadlineMilliseconds\": \"999999999999999\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{URL}}"
      },
      "response": []
    },
    {
      "name": "GoodRx_QA_94 Copy",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "ea0ee569-003e-479e-ab68-7a8da6424124",
            "exec": [
              "pm.test(\"First 56 bytes should be trimmed\", function () {\r",
              "    pm.expect(pm.response.json().payload).to.not.include(\"004766D0QASTR94        QASTR94        20220124HJG       \");\r",
              "});\r",
              "\r",
              "/*---------------------------------------------*/\r",
              "\r",
              "pm.test(\"Successful POST request\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
              "});\r",
              "\r",
              "pm.test(\"Response time is less than 10000ms\", function() {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
              "});\r",
              "\r",
              "pm.test(\"Global transmission ID matches\", function () {\r",
              "    pm.expect(pm.response.json().id).to.include(pm.environment.get(\"globalTransmissionID\"));\r",
              "});\r",
              "\r",
              "pm.test(\"Switch transaction ID matches\", function () {\r",
              "    pm.expect(pm.response.json().id).to.include(pm.environment.get(\"switchTransactionID\"));\r",
              "});\r",
              "\r",
              "pm.test(\"Response should be in json format\", function(){\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"No error\", function () {\r",
              "    pm.response.to.not.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"No EXCEPTION_CAUSE error\", function () {\r",
              "    pm.expect(pm.response.text()).to.not.include(\"EXCEPTION_CAUSE\");\r",
              "});\r",
              "\r",
              "pm.test(\"Status is not bad request\", function () {\r",
              "    pm.response.to.not.be.badRequest;\r",
              "});\r",
              "\r",
              "\r",
              "\r",
              "var responseData = pm.response.json();\r",
              "\r",
              "var ID = responseData.id\r",
              "pm.test(\"Generated ID: \" + ID, function () {});\r",
              "\r",
              "pm.environment.set(\"clmGlobalSwitchID\", responseData.id);\r",
              "pm.environment.set(\"clmPayload\", responseData.payload);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "df48c976-bb0b-4ea1-b408-1c87975579f4",
            "exec": [
              "var moment = require('moment');\r",
              "pm.environment.set('currDate', moment().format(\"YYYYMMDD\"));\r",
              "\r",
              "var firstRand = Math.floor(Math.random() * 1000);\r",
              "\r",
              "var secondRand = Math.floor(Math.random() * 100);\r",
              "\r",
              "pm.variables.set('globalTransmissionID', firstRand + '0' + secondRand);\r",
              "\r",
              "pm.variables.set('switchTransactionID', secondRand + '1' + firstRand);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "5864ec1d-c43f-454e-9206-e9491865bd89",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"id\": \"{{IDKey}}{{currDate}}{{globalTransmissionID}}_{{IDKey}}{{currDate}}{{switchTransactionID}}\",\r\n    \"type\": \"GOODRX\",\r\n    \"isSynthetic\": {{isSynthetic}},\r\n    \"payload\": \"004766D0QASTR94        QASTR94        20220124HJG       \\u001e\\u001cAM01\\u001cC419500101\\u001cC51\\u001cCATEST\\u001cCBTEST\\u001cCMSOMEWHERE TEXAS\\u001cCNFORT F4TEST WORTH\\u001cCOTX\\u001cCP76116\\u001cCQ1111111111\\u001cC701\\u001c4X\\u001e\\u001cAM04\\u001cC244094326581\\u001cCCTEST\\u001cCDTEST\\u001cC1ELTESTTEST\\u001cC3\\u001cC61\\u001d\\u001e\\u001cAM07\\u001cEM1\\u001cNX2\\u001cD2000004471591\\u001cE103\\u001cD700006057761\\u001cE7001000\\u001cD30\\u001cD57\\u001cD61\\u001cD80\\u001cDE20120113\\u001cDF12\\u001cDJ1\\u001cC800\\u001c28ML\\u001cEU\\u001cEV\\u001cU701\\u001e\\u001cAM02\\u001cEY05\\u001cE91306935911\\u001e\\u001cAM03\\u001cEZ01\\u001cDB1851621064\\u001cDRKIM\\u001cPM7018573255\\u001c2JKWANGHEE\\u001c2K831 S BROADWAY #102\\u001c2MMINOT\\u001c2NND\\u001c2P58701\\u001e\\u001cAM11\\u001cD9369{\\u001cDC70{\\u001cDX{\\u001cDQ377I\\u001cDU439{\\u001cDN01\",\r\n    \"metadata\": [\r\n        {\r\n            \"name\": \"IS_REQUEST\",\r\n            \"value\": \"{{meta_value}}\"\r\n        }\r\n    ],\r\n    \"deadlineMilliseconds\": \"999999999999999\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{URL}}"
      },
      "response": []
    },
    {
      "name": "GoodRx_QA_95 Copy",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "1c9a3dd5-db84-45b3-8355-8cec762e17c2",
            "exec": [
              "pm.test(\"BIN/PCN of 004766/STR95 should NOT be returned\", function () {\r",
              "    pm.expect(pm.response.json().payload).to.not.include(\"004766\");\r",
              "    pm.expect(pm.response.json().payload).to.not.include(\"STR95\");\r",
              "});\r",
              "\r",
              "pm.test(\"NPI, DOS, and vendor fields should NOT be returned\", function () {\r",
              "    pm.expect(pm.response.json().payload).to.not.include(\"101QASTR95\");\r",
              "    pm.expect(pm.response.json().payload).to.not.include(\"20220504\");\r",
              "    pm.expect(pm.response.json().payload).to.not.include(\"HJG\");\r",
              "});\r",
              "\r",
              "/*---------------------------------------------*/\r",
              "\r",
              "pm.test(\"Successful POST request\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
              "});\r",
              "\r",
              "pm.test(\"Response time is less than 10000ms\", function() {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
              "});\r",
              "\r",
              "pm.test(\"Global transmission ID matches\", function () {\r",
              "    pm.expect(pm.response.json().id).to.include(pm.environment.get(\"globalTransmissionID\"));\r",
              "});\r",
              "\r",
              "pm.test(\"Switch transaction ID matches\", function () {\r",
              "    pm.expect(pm.response.json().id).to.include(pm.environment.get(\"switchTransactionID\"));\r",
              "});\r",
              "\r",
              "pm.test(\"Response should be in json format\", function(){\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"No error\", function () {\r",
              "    pm.response.to.not.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"No EXCEPTION_CAUSE error\", function () {\r",
              "    pm.expect(pm.response.text()).to.not.include(\"EXCEPTION_CAUSE\");\r",
              "});\r",
              "\r",
              "pm.test(\"Status is not bad request\", function () {\r",
              "    pm.response.to.not.be.badRequest;\r",
              "});\r",
              "\r",
              "\r",
              "\r",
              "var responseData = pm.response.json();\r",
              "\r",
              "var ID = responseData.id\r",
              "pm.test(\"Generated ID: \" + ID, function () {});\r",
              "\r",
              "pm.environment.set(\"clmGlobalSwitchID\", responseData.id);\r",
              "pm.environment.set(\"clmPayload\", responseData.payload);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "67925f75-ef6e-4f57-a971-c88f2594902d",
            "exec": [
              "var moment = require('moment');\r",
              "pm.environment.set('currDate', moment().format(\"YYYYMMDD\"));\r",
              "\r",
              "var firstRand = Math.floor(Math.random() * 1000);\r",
              "\r",
              "var secondRand = Math.floor(Math.random() * 100);\r",
              "\r",
              "pm.variables.set('globalTransmissionID', firstRand + '0' + secondRand);\r",
              "\r",
              "pm.variables.set('switchTransactionID', secondRand + '1' + firstRand);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "f5182366-fa68-467e-8d90-316fa715c1d6",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"id\": \"{{IDKey}}{{currDate}}{{globalTransmissionID}}_{{IDKey}}{{currDate}}{{switchTransactionID}}\",\r\n    \"type\": \"GOODRX\",\r\n    \"isSynthetic\": {{isSynthetic}},\r\n    \"payload\": \"004766D0QASTR95     101QASTR95        20220504HJG       \\u001e\\u001cAM01\\u001cC419500101\\u001cC51\\u001cCATEST\\u001cCBTEST\\u001cCMSOMEWHERE TEXAS\\u001cCNFORT F4TEST WORTH\\u001cCOTX\\u001cCP76116\\u001cCQ1111111111\\u001cC701\\u001c4X\\u001e\\u001cAM04\\u001cC244094326581\\u001cCCTEST\\u001cCDTEST\\u001cC1ELTESTTEST\\u001cC3\\u001cC61\\u001d\\u001e\\u001cAM07\\u001cEM1\\u001cNX2\\u001cD2000004471591\\u001cE103\\u001cD700006057761\\u001cE7001000\\u001cD30\\u001cD57\\u001cD61\\u001cD80\\u001cDE20120113\\u001cDF12\\u001cDJ1\\u001cC800\\u001c28ML\\u001cEU\\u001cEV\\u001cU701\\u001e\\u001cAM02\\u001cEY05\\u001cE91306935911\\u001e\\u001cAM03\\u001cEZ01\\u001cDB1851621064\\u001cDRKIM\\u001cPM7018573255\\u001c2JKWANGHEE\\u001c2K831 S BROADWAY #102\\u001c2MMINOT\\u001c2NND\\u001c2P58701\\u001e\\u001cAM11\\u001cD9369{\\u001cDC70{\\u001cDX{\\u001cDQ377I\\u001cDU439{\\u001cDN01\",\r\n    \"metadata\": [\r\n        {\r\n            \"name\": \"IS_REQUEST\",\r\n            \"value\": \"{{meta_value}}\"\r\n        }\r\n    ],\r\n    \"deadlineMilliseconds\": \"999999999999999\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{URL}}"
      },
      "response": []
    }
  ]
}